// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  student
  admin
}

enum RegistrationStatus {
  active
  canceled
  finished
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  role          UserRole
  password      String?
  createdAt     DateTime @default(now()) @map("created_at")
  createdBy     User?    @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById   String?  @map("created_by")
  updatedAt     DateTime @updatedAt @map("updated_at")
  updatedBy     User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])
  updatedById   String?  @map("updated_by")
  profile       Profile?
  createdUsers  User[]   @relation("CreatedByUser")
  updatedUsers  User[]   @relation("UpdatedByUser")
  createdGroups Group[]  @relation("GroupCreatedBy")
  updatedGroups Group[]  @relation("GroupUpdatedBy")
}

model Profile {
  id                    String         @id @default(uuid())
  user                  User           @relation(fields: [userId], references: [id])
  userId                String         @unique @map("user_id")
  name                  String?
  academic_registration String?
  identification        String?
  registrations         Registration[]
}

model Course {
  id          String   @id @default(uuid())
  name        String   @map("nome") @db.VarChar(100)
  description String   @map("descricao") @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  groups      Group[]
}

model Group {
  id            String         @id @default(uuid())
  course        Course         @relation(fields: [courseId], references: [id])
  courseId      String         @map("course_id")
  code          String         @unique @db.VarChar(50)
  startDate     DateTime       @map("start_date")
  endDate       DateTime       @map("end_date")
  createdAt     DateTime       @default(now()) @map("created_at")
  createdBy     User           @relation("GroupCreatedBy", fields: [createdById], references: [id])
  createdById   String         @map("created_by")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  updatedBy     User           @relation("GroupUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String         @map("updated_by")
  registrations Registration[]
}

model Registration {
  id             String             @id @default(uuid())
  student        Profile            @relation(fields: [studentId], references: [id])
  studentId      String             @map("student_id")
  group          Group              @relation(fields: [groupId], references: [id])
  groupId        String             @map("group_id")
  registrationAt DateTime           @default(now()) @map("registration_at")
  status         RegistrationStatus
}
